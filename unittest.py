# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vbfhswtZHD---db2eDeTfnpuGZB3aaRa
"""

import unittest
from io import StringIO
import os
from import_eksport_files import (
    import_students_csv,
    export_students_csv,
    import_students_txt,
    export_students_txt,
    mark_attendance,
)

class TestImportExport(unittest.TestCase):

    def setUp(self):
        """Przygotowanie danych testowych."""
        self.csv_file = "test_students.csv"
        self.txt_file = "test_students.txt"
        self.students = [
            {"name": "Jan Kowalski", "present": False},
            {"name": "Anna Nowak", "present": False},
        ]

    def tearDown(self):
        """Sprzątanie plików testowych."""
        for file in [self.csv_file, self.txt_file]:
            if os.path.exists(file):
                os.remove(file)

    # Test importu z CSV
    def test_import_students_csv(self):
        with open(self.csv_file, mode='w', newline='') as file:
            file.write("Jan Kowalski\nAnna Nowak\n")

        students = import_students_csv(self.csv_file)
        expected = [{"name": "Jan Kowalski", "present": False}, {"name": "Anna Nowak", "present": False}]
        self.assertEqual(students, expected, "Lista studentów powinna być poprawnie zaimportowana z pliku CSV.")

    # Test eksportu do CSV
    def test_export_students_csv(self):
        export_students_csv(self.students, self.csv_file)
        with open(self.csv_file, mode='r') as file:
            content = file.read()
        self.assertIn("Jan Kowalski,False", content, "Dane studenta powinny być zapisane w pliku CSV.")

    # Test importu z TXT
    def test_import_students_txt(self):
        with open(self.txt_file, mode='w') as file:
            file.write("Jan Kowalski\nAnna Nowak\n")

        students = import_students_txt(self.txt_file)
        expected = [{"name": "Jan Kowalski", "present": False}, {"name": "Anna Nowak", "present": False}]
        self.assertEqual(students, expected, "Lista studentów powinna być poprawnie zaimportowana z pliku TXT.")

    # Test eksportu do TXT
    def test_export_students_txt(self):
        export_students_txt(self.students, self.txt_file)
        with open(self.txt_file, mode='r') as file:
            content = file.read()
        self.assertIn("Jan Kowalski: Absent", content, "Dane studenta powinny być zapisane w pliku TXT.")

    # Test obsługi braku pliku przy imporcie CSV
    def test_import_students_csv_file_not_found(self):
        students = import_students_csv("nonexistent.csv")
        self.assertEqual(students, [], "Funkcja powinna zwrócić pustą listę, gdy plik CSV nie istnieje.")

    # Test obsługi braku pliku przy imporcie TXT
    def test_import_students_txt_file_not_found(self):
        students = import_students_txt("nonexistent.txt")
        self.assertEqual(students, [], "Funkcja powinna zwrócić pustą listę, gdy plik TXT nie istnieje.")

    # Test funkcji mark_attendance
    def test_mark_attendance(self):
        students = [{"name": "Jan Kowalski", "present": False}, {"name": "Anna Nowak", "present": False}]
        input_mock = StringIO("y\nn\n")
        output_mock = StringIO()

        # Zastąp input i output w funkcji
        original_input = __builtins__.input
        original_print = __builtins__.print
        __builtins__.input = lambda _: input_mock.readline().strip()
        __builtins__.print = lambda *args, **kwargs: output_mock.write(" ".join(map(str, args)) + "\n")

        try:
            mark_attendance(students)
        finally:
            # Przywrócenie oryginalnych funkcji
            __builtins__.input = original_input
            __builtins__.print = original_print

        self.assertTrue(students[0]["present"], "Pierwszy student powinien być obecny.")
        self.assertFalse(students[1]["present"], "Drugi student powinien być nieobecny.")

if __name__ == "__main__":
    unittest.main()